{"version":3,"sources":["Context.js","Components/LandingPage/Landing.js","Components/SecondPage/Second.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["PokeContext","React","createContext","Provider","state","Test","value","this","props","children","Component","Meta","Consumer","Typography","Title","Card","Landing","useContext","useState","load","setLoaded","items","SetItems","useEffect","fetch","then","x","json","y","setTimeout","results","forEach","e","ImgUrl","name","console","log","Fragment","Length","loading","active","Paragraph","rows","map","hoverable","style","width","float","cover","alt","src","title","Second","Context","Header","Layout","Heading","className","theme","mode","defaultSelectedKeys","Item","key","to","pathname","activeClassName","Content","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gWAIMA,EAAcC,IAAMC,gBAEpBC,E,4MACFC,MAAQ,CACJC,KAAK,Q,uDAIL,OACI,kBAACL,EAAYG,SAAb,CAAsBG,MAAK,eACpBC,KAAKH,QAKPG,KAAKC,MAAMC,c,GAbLC,aCAfC,GDmBSX,EAAYY,SCpBXC,IAAVC,MACSC,IAATJ,MAsDOK,EApDC,SAACR,GACGS,qBAAWjB,GAA3B,IADsB,EAEGkB,oBAAS,GAFZ,mBAEfC,EAFe,KAEVC,EAFU,OAGGF,mBAAS,IAHZ,mBAGfG,EAHe,KAGTC,EAHS,KA0BtB,OAtBAC,qBAAU,WACFJ,GAEAK,MAAM,kCAAkCC,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UAAQF,MAAK,SAAAG,GAEvDC,YAAW,WACPD,EAAEE,QAAQC,SAAQ,SAAAC,GACdA,EAAEC,OAAS,0EAA0ED,EAAEE,KAAK,UAGhGZ,EAASM,EAAEE,SACXV,GAAU,GACVe,QAAQC,IAAIR,EAAEE,WAChB,UAQhB,IAEE,kBAAC,IAAMO,SAAP,KACqB,GAAhBhB,EAAMiB,OACC,kBAAC,IAAD,CAAUC,SAAS,EAAMC,QAAM,EAACC,UAAW,CAACC,KAAK,QAGzD,kBAAC,IAAML,SAAP,KACIhB,EAAMsB,KAAI,SAAAjB,GACP,OACC,kBAAC,IAAD,CACAkB,WAAS,EACTC,MAAO,CAAEC,MAAO,IAAIC,MAAM,QAC1BC,MAAO,yBAAKC,IAAI,UAAUC,IAAKxB,EAAEO,UAGjC,kBAACtB,EAAD,CAAMwC,MAAOzB,EAAEQ,cCrCpBkB,EATA,SAAC5C,GACZ,IAAM6C,EAAUpC,qBAAWjB,GAE3B,OACI,kBAAC,IAAMqC,SAAP,KACKgB,EAAQhD,O,kBCJbiD,EAAWC,IAAXD,OAwBOE,EAtBC,SAAChD,GAEb,OACI,kBAAC,IAAM6B,SAAP,KACI,kBAACiB,EAAD,CAAQG,UAAU,UACV,yBAAKA,UAAU,SACnB,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACvD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACd,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAS,iBAAoBC,gBAAgB,QAAxD,SAID,kBAAC,IAAKJ,KAAN,CAAWC,IAAI,KACd,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAS,uBAAyBC,gBAAgB,QAA7D,eCXbC,EAAYX,IAAZW,QAoBOC,MAhBf,WACE,OACE,kBAAC,IAAM9B,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC6B,EAAD,KACA,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,gBAAgBC,UAAWtD,IAC7C,kBAAC,IAAD,CAAOoD,OAAK,EAACC,KAAK,sBAAsBC,UAAWlB,SCR3CmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.ac2fd7cb.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\n\r\n\r\nconst PokeContext = React.createContext();\r\n\r\nclass Provider extends Component{\r\n    state = {\r\n        Test:\"test\"        \r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <PokeContext.Provider value={{\r\n                ...this.state,\r\n                //Test\r\n    \r\n               \r\n            }}>\r\n                {this.props.children}\r\n            </PokeContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nconst Consumer = PokeContext.Consumer;\r\n\r\nexport {Provider,Consumer,PokeContext};","import React, { useState,useContext,useHistory, useEffect  } from 'react';\r\nimport { Typography  } from 'antd';\r\nimport { Skeleton, List, Avatar } from 'antd';\r\nimport { Card } from 'antd';\r\nimport {PokeContext} from '../../Context';\r\nconst { Title } = Typography;\r\nconst { Meta } = Card;\r\n\r\nconst Landing = (props) =>{\r\n    const Context = useContext(PokeContext);\r\n    const [load,setLoaded] = useState(false);\r\n    const [items,SetItems] = useState([]);\r\n    useEffect(()=>{\r\n        if(!load)\r\n        {\r\n            fetch(\"https://pokeapi.co/api/v2/item\").then(x=>x.json()).then(y=>\r\n                {\r\n                    setTimeout(function(){\r\n                        y.results.forEach(e => {\r\n                            e.ImgUrl = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/\"+e.name+\".png\";\r\n                            \r\n                        });\r\n                        SetItems(y.results);\r\n                        setLoaded(true);\r\n                        console.log(y.results);\r\n                    },3000)\r\n                    \r\n                    \r\n                    \r\n                })\r\n        }\r\n       \r\n        \r\n    },[])\r\n    return (\r\n        <React.Fragment>\r\n            {items.Length == 0 ? (\r\n                    <Skeleton loading={true} active Paragraph={{rows:'10'}}>\r\n                    </Skeleton>\r\n            ) : (\r\n            <React.Fragment>\r\n               {items.map(x=>{\r\n                   return (\r\n                    <Card\r\n                    hoverable\r\n                    style={{ width: 200,float:'left' }}\r\n                    cover={<img alt=\"example\" src={x.ImgUrl} />}\r\n                  >\r\n                    {/* <Meta title={x.name} description=\"www.instagram.com\" /> */}\r\n                    <Meta title={x.name} />\r\n                  </Card>\r\n                   )\r\n                   \r\n                   })}\r\n            </React.Fragment>\r\n            )\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Landing;","import React,{useContext} from \"react\";\r\nimport {PokeContext} from '../../Context';\r\n\r\nconst Second = (props) =>{\r\n    const Context = useContext(PokeContext);\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            {Context.Test}\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Second;","import React from \"react\";\r\nimport { Layout, Menu } from 'antd';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst Heading = (props) =>{\r\n    //const Context = useContext(ProdContext);\r\n    return (\r\n        <React.Fragment>\r\n            <Header className=\"header\">\r\n                    <div className=\"logo\" />\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\r\n                    <Menu.Item key=\"1\">\r\n                    {<Link to={{pathname:\"/demoproject/\"}  } activeClassName=\"test\" >\r\n                    Home\r\n                    </Link>}\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\">\r\n                    {<Link to={{pathname:\"/demoproject/Second\"} } activeClassName=\"test\">\r\n                    Second\r\n                    </Link>}\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Header>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Heading;","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {  BrowserRouter as Router,  withRouter,  HashRouter,  Switch,  Route,  Link} from \"react-router-dom\";\nimport Landing  from '../src/Components/LandingPage/Landing';\nimport Second  from '../src/Components/SecondPage/Second';\nimport Heading  from '../src/Components/Header/Header';\nimport { Layout } from 'antd';\nconst { Content } = Layout;\n\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Layout>\n        <Content>\n        <Router>\n            <Heading></Heading>\n            <Route exact path=\"/demoproject/\" component={Landing}/> \n            <Route exact path=\"/demoproject/Second\" component={Second}/> \n        </Router>\n        </Content>\n      </Layout>\n    </React.Fragment>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from './Context'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}